ARG TESTNET_BUILDER_IMAGE

#---------------------------------------------------------------------

FROM ${TESTNET_BUILDER_IMAGE} AS testnet_builder

#---------------------------------------------------------------------

FROM docker.io/debian:stable-20250721-slim AS build

# NOTE:
# Additional ARG definitions can be found further below in the Dockerfile.

ARG BLST_VERSION="${BLST_VERSION:-0.3.11}"
ARG JOBS="${JOBS:-8}"
ARG LIBSODIUM_VERSION="${LIBSODIUM_VERSION:-dbb48cc}"
ARG NODE_EXPORTER_VERSION="${NODE_EXPORTER_VERSION:-1.9.1}"
ARG PROCESS_EXPORTER_VERSION="${PROCESS_EXPORTER_VERSION:-0.8.7}"
ARG SECP256K1_VERSION="${SECP256K1_VERSION:-ac83be33}"

ENV TZ="UTC"
RUN ln -snf /usr/share/zoneinfo/${TZ} /etc/localtime && \
    echo ${TZ} > /etc/timezone

RUN apt update && \
    apt install -y --no-install-recommends \
        autoconf \
        automake \
        build-essential \
        ca-certificates \
        curl \
        g++ \
        git \
        gnupg \
        libffi-dev \
        libgmp-dev \
        liblmdb-dev \
        libncurses-dev \
        libssl-dev \
        libsystemd-dev \
        libtinfo-dev \
        libtool \
        pkg-config \
        tar \
        zlib1g-dev

# node_exporter

RUN install --directory --owner=root --group=root --mode=0755 /usr/local/src/node_exporter

RUN curl --proto '=https' --tlsv1.2 \
        --location https://github.com/prometheus/node_exporter/releases/download/v${NODE_EXPORTER_VERSION}/node_exporter-${NODE_EXPORTER_VERSION}.linux-amd64.tar.gz \
        --output /usr/local/src/node_exporter/node_exporter-${NODE_EXPORTER_VERSION}.linux-amd64.tar.gz

RUN curl --proto '=https' --tlsv1.2 \
        --location https://github.com/prometheus/node_exporter/releases/download/v${NODE_EXPORTER_VERSION}/sha256sums.txt \
        --output /usr/local/src/node_exporter/sha256sums.txt

WORKDIR /usr/local/src/node_exporter
RUN sha256sum --ignore-missing --check sha256sums.txt

RUN tar --extract --gzip --file=/usr/local/src/node_exporter/node_exporter-${NODE_EXPORTER_VERSION}.linux-amd64.tar.gz --directory=/usr/local/src/node_exporter

RUN chmod 0755 /usr/local/src/node_exporter/node_exporter-${NODE_EXPORTER_VERSION}.linux-amd64

RUN ln -s /usr/local/src/node_exporter/node_exporter-${NODE_EXPORTER_VERSION}.linux-amd64/node_exporter /usr/local/bin/node_exporter

# libsodium

WORKDIR /usr/local/src
RUN git clone --branch master https://github.com/IntersectMBO/libsodium.git

WORKDIR /usr/local/src/libsodium
RUN git checkout ${LIBSODIUM_VERSION} && \
    ./autogen.sh && \
    ./configure && \
    make && \
    make check && \
    make install -j${JOBS}

# secp256k1

WORKDIR /usr/local/src
RUN git clone --branch master https://github.com/bitcoin-core/secp256k1.git

WORKDIR /usr/local/src/secp256k1
RUN git checkout ${SECP256K1_VERSION} && \
    ./autogen.sh && \
    ./configure --prefix=/usr --enable-module-schnorrsig --enable-experimental && \
    make && \
    make check && \
    make install -j${JOBS}

# blst

WORKDIR /usr/local/src
RUN git clone --branch master https://github.com/supranational/blst.git

WORKDIR /usr/local/src/blst
RUN git checkout v${BLST_VERSION} && \
    ./build.sh
RUN echo "prefix=/usr/local\n\
exec_prefix=/usr/local\n\
libdir=/usr/local/lib\n\
includedir=/usr/local/include\n\
\n\
Name: libblst\n\
Description: Multilingual BLS12-381 signature library\n\
URL: https://github.com/supranational/blst\n\
Version: ${BLST_VERSION}\n\
Cflags: -I/usr/local/include\n\
Libs: -L/usr/local/lib -lblst" >/usr/local/src/blst/libblst.pc

RUN mv /usr/local/src/blst/libblst.pc /usr/local/lib/pkgconfig/ && \
    mv /usr/local/src/blst/bindings/blst.h /usr/local/include/ && \
    mv /usr/local/src/blst/bindings/blst.hpp /usr/local/include/ && \
    mv /usr/local/src/blst/bindings/blst_aux.h /usr/local/include/ && \
    mv /usr/local/src/blst/libblst.a /usr/local/lib

ENV LD_LIBRARY_PATH="/usr/local/lib:$LD_LIBRARY_PATH" \
    PKG_CONFIG_PATH="/usr/local/lib/pkgconfig:$PKG_CONFIG_PATH"

# cardano-cli

ARG CARDANO_CLI_VERSION="${CARDANO_CLI_VERSION:-10.11.1.0}"

WORKDIR /usr/local/src
RUN git clone --branch master https://github.com/IntersectMBO/cardano-cli.git

# GHCup

ARG BOOTSTRAP_HASKELL_CABAL_VERSION="${BOOTSTRAP_HASKELL_CABAL_VERSION:-3.12.1.0}"
ARG BOOTSTRAP_HASKELL_GHC_VERSION="${BOOTSTRAP_HASKELL_GHC_VERSION:-9.6.7}"

RUN curl --proto '=https' --tlsv1.2 -sSf https://get-ghcup.haskell.org | sh

RUN ln -s /root/.ghcup/bin/cabal-${BOOTSTRAP_HASKELL_CABAL_VERSION} /usr/local/bin/cabal && \
    ln -s /root/.ghcup/ghc/${BOOTSTRAP_HASKELL_GHC_VERSION}/bin/ghc-${BOOTSTRAP_HASKELL_GHC_VERSION} /usr/local/bin/ghc

# cardano-cli

WORKDIR /usr/local/src/cardano-cli
RUN git fetch --all --recurse-submodules --tags && \
    git checkout cardano-cli-${CARDANO_CLI_VERSION}
RUN echo "package *\n\
  ghc-options: +RTS -A128m -n2m -RTS\n\
\n\
jobs: \$ncpus\n\
semaphore: True" > /usr/local/src/cardano-cli/cabal.project.local

WORKDIR /usr/local/src/cardano-cli/cardano-cli
RUN cabal update && \
    cabal build exe:cardano-cli

RUN chmod 0755 /usr/local/src/cardano-cli/dist-newstyle/build/x86_64-linux/ghc-*/cardano-cli-*/x/cardano-cli/build/cardano-cli/cardano-cli

RUN ln -s /usr/local/src/cardano-cli/dist-newstyle/build/x86_64-linux/ghc-*/cardano-cli-*/x/cardano-cli/build/cardano-cli/cardano-cli /usr/local/bin/cardano-cli

# cardano-node

ARG CARDANO_NODE_REF="${CARDANO_NODE_REF:-10.4.1}"
ARG CARDANO_NODE_REPO="${CARDANO_NODE_REPO:-https://github.com/IntersectMBO/cardano-node.git}"

WORKDIR /usr/local/src
RUN git clone --branch master ${CARDANO_NODE_REPO}

WORKDIR /usr/local/src/cardano-node
RUN git fetch --all --recurse-submodules --tags && \
    git checkout ${CARDANO_NODE_REF}
RUN echo "package *\n\
  ghc-options: +RTS -A128m -n2m -RTS\n\
\n\
package ouroboros-network\n\
  ghc-options: -fno-ignore-asserts\n\
\n\
package ouroboros-network-framework\n\
  ghc-options: -fno-ignore-asserts\n\
\n\
package ouroboros-network-api\n\
  ghc-options: -fno-ignore-asserts\n\
\n\
package ouroboros-network-protocols\n\
  ghc-options: -fno-ignore-asserts\n\
\n\
package network-mux\n\
  ghc-options: -fno-ignore-asserts\n\
\n\
jobs: \$ncpus\n\
semaphore: True" > /usr/local/src/cardano-node/cabal.project.local

WORKDIR /usr/local/src/cardano-node/cardano-node
RUN cabal update && \
    cabal build exe:cardano-node
RUN ln -s /usr/local/src/cardano-node/dist-newstyle/build/x86_64-linux/ghc-${BOOTSTRAP_HASKELL_GHC_VERSION}/cardano-node-*/x/cardano-node/build/cardano-node/cardano-node /usr/local/bin/cardano-node

# tx-generator

RUN cabal build exe:tx-generator
RUN ln -s /usr/local/src/cardano-node/dist-newstyle/build/x86_64-linux/ghc-${BOOTSTRAP_HASKELL_GHC_VERSION}/tx-generator-*/x/tx-generator/build/tx-generator/tx-generator /usr/local/bin/tx-generator

# process_exporter

RUN install --directory --owner=root --group=root --mode=0755 /usr/local/src/process_exporter

RUN curl --proto '=https' --tlsv1.2 \
        --location https://github.com/ncabatoff/process-exporter/releases/download/v${PROCESS_EXPORTER_VERSION}/process-exporter-${PROCESS_EXPORTER_VERSION}.linux-amd64.tar.gz \
        --output /usr/local/src/process_exporter/process-exporter-${PROCESS_EXPORTER_VERSION}.linux-amd64.tar.gz

RUN curl --proto '=https' --tlsv1.2 \
        --location https://github.com/ncabatoff/process-exporter/releases/download/v${PROCESS_EXPORTER_VERSION}/checksums.txt \
        --output /usr/local/src/process_exporter/checksums.txt

WORKDIR /usr/local/src/process_exporter
RUN sha256sum --ignore-missing --check checksums.txt

RUN tar --extract --gzip --file=/usr/local/src/process_exporter/process-exporter-${PROCESS_EXPORTER_VERSION}.linux-amd64.tar.gz --directory=/usr/local/src/process_exporter

RUN chmod 0755 /usr/local/src/process_exporter/process-exporter-${PROCESS_EXPORTER_VERSION}.linux-amd64/process-exporter

RUN ln -s /usr/local/src/process_exporter/process-exporter-${PROCESS_EXPORTER_VERSION}.linux-amd64/process-exporter /usr/local/bin/process_exporter

#---------------------------------------------------------------------

FROM docker.io/debian:stable-20250721-slim AS main

ENV CARDANO_NODE_SOCKET_PATH="/opt/cardano-node/data/db/node.socket"

ENV TZ="UTC"
RUN ln -snf /usr/share/zoneinfo/${TZ} /etc/localtime && \
    echo ${TZ} > /etc/timezone

RUN apt update && \
    apt install -y --no-install-recommends \
        bc \
        curl \
        dnsutils \
        doas \
        iproute2 \
        iputils-ping \
        jq \
        less \
        lsof \
        netbase \
        netcat-openbsd \
        openssl \
        postgresql-client \
        procps \
        tcpdump \
        telnet \
        vim

COPY --from=build --chown=root:root /usr/local/lib/libsodium.so /usr/local/lib
RUN ln -snf /usr/local/lib/libsodium.so /usr/local/lib/libsodium.so.23 && \
    ln -snf /usr/local/lib/libsodium.so /usr/local/lib/libsodium.so.23.3.0
RUN ldconfig

COPY --from=build --chown=root:root /usr/local/src/secp256k1/.libs/libsecp256k1.so /usr/local/lib
RUN ln -snf /usr/local/lib/libsecp256k1.so /usr/local/lib/libsecp256k1.so.1 && \
    ln -snf /usr/local/lib/libsecp256k1.so /usr/local/lib/libsecp256k1.so.1.0.1
RUN ldconfig

COPY --from=build --chown=root:root /usr/local/bin/cardano-cli /usr/local/bin/cardano-cli
COPY --from=build --chown=root:root /usr/local/bin/cardano-node /usr/local/bin/cardano-node
COPY --from=build --chown=root:root /usr/local/bin/tx-generator /usr/local/bin/tx-generator
COPY --from=build --chown=root:root /usr/local/bin/node_exporter /usr/local/bin/node_exporter
COPY --from=build --chown=root:root /usr/local/bin/process_exporter /usr/local/bin/process_exporter

RUN groupadd --gid 10000 cardano && \
    useradd --comment 'cardano' --create-home --gid 10000 --password '!' --shell '/bin/bash' --uid 10000 cardano

RUN install --directory --owner=root --group=root --mode=0755 /opt/cardano-node && \
    install --directory --owner=cardano --group=cardano --mode=0750 /opt/cardano-node/config && \
    install --directory --owner=cardano --group=cardano --mode=0750 /opt/cardano-node/data && \
    install --directory --owner=cardano --group=cardano --mode=0750 /opt/cardano-node/data/db && \
    install --directory --owner=cardano --group=cardano --mode=0750 /opt/cardano-node/log && \
    install --directory --owner=cardano --group=cardano --mode=0750 /opt/cardano-node/pools

COPY --from=testnet_builder --chown=cardano:cardano /tmp/testnet/pools /opt/cardano-node/pools
COPY --from=testnet_builder --chown=cardano:cardano /tmp/testnet/utxos /opt/cardano-node/utxos

# Permit cardano user to run commands 'ip' and 'tc' as root
RUN echo 'permit setenv { PATH=/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin } :cardano' >> /etc/doas.conf
RUN echo 'permit nopass cardano as root cmd ip' >> /etc/doas.conf
RUN echo 'permit nopass cardano as root cmd tc' >> /etc/doas.conf

COPY cardano-node/scripts/*.sh /
COPY scripts/node_routes.sh /
RUN chmod 0755 /*.sh

COPY cardano-node/cmd.sh /
RUN chmod 0755 /cmd.sh

USER cardano

CMD ["/cmd.sh"]
